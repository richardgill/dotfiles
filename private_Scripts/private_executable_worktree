#!/bin/bash
if [ "$#" -eq 0 ]; then
  echo "Usage: source $0 path-to-directory"
  return 1  # Use 'return' instead of 'exit' when the script is sourced
fi

# Check if the input includes a branch in the format 'remote/branch'
if [[ "$1" =~ (.+)/(.+) ]]; then
  REMOTE="${BASH_REMATCH[1]}"
  BRANCH="${BASH_REMATCH[2]}"
  echo "Fetching from $REMOTE branch $BRANCH"
  git fetch "$REMOTE" "$BRANCH"
  # Update the first argument ($1) to just the branch name for consistency in later use
  set -- "$BRANCH" "${@:2}"
fi

SOURCE=$(realpath .)
TARGET="$SOURCE/../$1"

git worktree add $TARGET

cd $TARGET
if [ -n "$TMUX" ]; then
  tmux split-window -v -c '#{pane_current_path}'

  tmux new-window -a -c "#{pane_current_path}"

  SOCKET_FILE="/tmp/nvim-socket-$(uuidgen)"

  tmux send-keys "v . --listen $SOCKET_FILE" Enter
fi


echo "copying gitignored files"

# Navigate to the original repo root
(cd $SOURCE && git ls-files --others --ignored --exclude-standard) | while read filename; do
  # Skip directories
  if [ -d "$filename" ] || [[ "$filename" == *node_modules* ]]; then
    continue
  fi

  echo "copying: $filename"

  # Create the directory structure in the new worktree if it doesn't exist
  mkdir -p "$TARGET/$(dirname "$filename")"
  # Copy the ignored file using copy-on-write
  cp -c "$SOURCE/$filename" "$TARGET/$filename"
done

pnpm i

if [ -n "$TMUX" ]; then
  nvim --server "$SOCKET_FILE" --remote-send ":LspRestart<CR>"
fi
